<!-- Spawns Puddles vehicle in the simulation -->
<launch>
  <arg name="debug" default="0" doc="Starts the Gazebo plugins in debug mode for more verbose output"/>

  <arg name="x" default="0" doc="X coordinate of the vehicle's initial position (in ENU)"/>
  <arg name="y" default="0" doc="Y coordinate of the vehicle's initial position (in ENU)"/>    
  <arg name="z" default="0" doc="Z coordinate of the vehicle's initial position (in ENU)"/>
  <arg name="roll" default="0.0" doc="Roll angle of the vehicle's initial orientation"/>
  <arg name="pitch" default="0.0" doc="Pitch angle of the vehicle's initial orientation"/>
  <arg name="yaw" default="0.0" doc="Yaw angle of the vehicle's initial orientation"/>

  <arg name="mode" default="default" doc="Vehicle's build configuration mode"/>
  <arg name="namespace" default="puddles" doc="Namespace to spawn the vehicle"/>
  <arg name="use_ned_frame" default="false" doc="Set the inertial reference to NED (North-East-Down) convention instead of Gazebo's default ENU (East-North-Up)"/>

  <group ns="$(arg namespace)">
    <group if="$(arg use_ned_frame)">
      <param name="robot_description"
             command="$(find xacro)/xacro '$(find riptide_descriptions)/robots/puddles_$(arg mode).xacro' --inorder
                      debug:=$(arg debug)
                      namespace:=$(arg namespace)
                      inertial_reference_frame:=world_ned" />
    </group>

    <group unless="$(arg use_ned_frame)">
      <param name="robot_description"
             command="$(find xacro)/xacro '$(find riptide_descriptions)/robots/puddles_$(arg mode).xacro' --inorder
                      debug:=$(arg debug)
                      namespace:=$(arg namespace)
                      inertial_reference_frame:=world" />
    </group>

    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
    <node name="urdf_spawner" pkg="uuv_descriptions" type="spawn_model" respawn="false" output="screen"
          args="-urdf -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -model $(arg namespace) -param /$(arg namespace)/robot_description"/>
    
    <!-- A joint state publisher -->
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" output="screen" />

    <!-- Publish robot model for ROS -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />
 </group>

</launch>
